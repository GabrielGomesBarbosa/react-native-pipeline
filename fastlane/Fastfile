is_server = ENV["CI"]
github_token = ENV["GITHUB_TOKEN"]
github_repository = ENV["GITHUB_REPOSITORY"]
json_key_file = CredentialsManager::AppfileConfig.try_fetch_value(:json_key_file)

puts "Debug: is_server = #{is_server}"

android_project_dir = "./android"
android_gradle_file = "#{android_project_dir}/app/build.gradle"

# ToDo: These values will come from the CI environment with commit message
increase_version_type = "patch"
release_notes = "[#{is_server ? 'GitHub Actions' : 'Local'}] O melhor aplicativo de tarefas de todos os tempos!"

android_properties = {
  "android.injected.signing.store.file" => ENV["ANDROID_SIGNING_KEY"],
  "android.injected.signing.store.password" => ENV["ANDROID_SIGNING_PASSWORD"],
  "android.injected.signing.key.alias" => ENV["ANDROID_SIGNING_ALIAS"],
  "android.injected.signing.key.password" => ENV["ANDROID_SIGNING_PASSWORD"]
}

platform :android do

  desc "Build debug APK"
  lane :buildDebug do
    build_android_app(task: "assembleDebug", project_dir: android_project_dir)
  end

  desc "Build release APK"
  lane :buildRelease do
    puts "Debug: ANDROID_SIGNING_ALIAS = #{ENV["ANDROID_SIGNING_ALIAS"]}"
    puts "Debug: ANDROID_SIGNING_PASSWORD = #{ENV["ANDROID_SIGNING_PASSWORD"]}"
    build_android_app(
      task: "assembleRelease",
      project_dir: android_project_dir,
      properties: android_properties
    )
  end

  desc "Bundle release .aab"
  lane :bundleRelease do

    # version_codes = google_play_track_version_codes(track: "internal")
    # puts "Debug: version_codes = #{version_codes}"

    # release_names = google_play_track_release_names(track: "internal")
    # puts "Debug: release_names = #{release_names}"

    puts "Debug: Get version code and name"
    version_code = android_get_version_code(gradle_file: android_gradle_file)
    puts "Debug: version_code = #{version_code}"
    # version_name = android_get_version_name(gradle_file: android_gradle_file)

    new_version_code = Integer(version_code) + 1

    puts "Debug: Update version code and name"
    increment_version_code(version_code: new_version_code)
    increment_version_name(bump_type: increase_version_type, 
      gradle_file_path: android_gradle_file)

    new_version_name = android_get_version_name(gradle_file: android_gradle_file)

    puts "Debug: Create changelog file for release notes"
    metadata_file_path = File.join(
      File.expand_path("..", Dir.pwd),
      'fastlane', 
      'metadata',
      'android',
      'pt-BR',
      'changelogs',
      "#{new_version_code}.txt"
    )

    File.open(metadata_file_path, "w") do |f|
      f.write("#{release_notes} [#{new_version_name}]")
    end

    puts "Debug: Bundle release .aab"
    build_android_app(
      task: "bundleRelease",
      project_dir: android_project_dir,
      properties: android_properties
    )

    puts "Debug: Upload to Play Store"
    upload_to_play_store(
      json_key: is_server ? ENV["GOOGLE_PLAY_JSON_KEY"] : json_key_file,
      track: "internal",
      skip_upload_apk: true, 
      release_status: "draft"
    )

    puts "Debug: Delete changelog file"
    File.delete(metadata_file_path) if File.exist?(metadata_file_path)

    build_gradle_file = File.join(
      File.expand_path("..", Dir.pwd), 
      'android', 
      'app', 
      'build.gradle'
    )

    puts "Debug: Setup git identity"
    if is_server
      system("git config --global user.email 'gabriel-gomes-barbosa@hotmail.com'")
      system("git config --global user.name 'GabrielGomesBarbosa'")
    end

    puts "Debug: Push to remote repository"
    git_add(path: build_gradle_file)
    git_commit(path: build_gradle_file, message: release_notes)
    add_git_tag(tag: "v#{new_version_name}")

    if is_server
      system("remote set-url --push origin https://your_username:#{github_token}@github.com/#{github_repository}")
    else
      push_to_git_remote
    end
  end
end
